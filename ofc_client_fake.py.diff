diff --git a/neutron/plugins/nec/common/ofc_client.py b/neutron/plugins/nec/common/ofc_client.py
index 4bc49b4..f4b5c71 100644
--- a/neutron/plugins/nec/common/ofc_client.py
+++ b/neutron/plugins/nec/common/ofc_client.py
@@ -16,11 +16,11 @@
 # @author: Ryota MIBU
 
 import httplib
-import json
-import socket
+# import json
+# import socket
 
 from neutron.openstack.common import log as logging
-from neutron.plugins.nec.common import exceptions as nexc
+# from neutron.plugins.nec.common import exceptions as nexc
 
 
 LOG = logging.getLogger(__name__)
@@ -67,50 +67,64 @@ class OFCClient(object):
         return (_("Operation on OFC failed: %(status)s%(msg)s") %
                 {'status': status, 'msg': detail})
 
+    # def do_request(self, method, action, body=None):
+    #     LOG.debug(_("Client request: %(host)s:%(port)s "
+    #                 "%(method)s %(action)s [%(body)s]"),
+    #               {'host': self.host, 'port': self.port,
+    #                'method': method, 'action': action, 'body': body})
+    #     if type(body) is dict:
+    #         body = json.dumps(body)
+    #     try:
+    #         conn = self.get_connection()
+    #         headers = {"Content-Type": "application/json"}
+    #         conn.request(method, action, body, headers)
+    #         res = conn.getresponse()
+    #         data = res.read()
+    #         LOG.debug(_("OFC returns [%(status)s:%(data)s]"),
+    #                   {'status': res.status,
+    #                    'data': data})
+
+    #         # Try to decode JSON data if possible.
+    #         try:
+    #             data = json.loads(data)
+    #         except (ValueError, TypeError):
+    #             pass
+
+    #         if res.status in (httplib.OK,
+    #                           httplib.CREATED,
+    #                           httplib.ACCEPTED,
+    #                           httplib.NO_CONTENT):
+    #             return data
+    #         else:
+    #             LOG.warning(_("Operation on OFC failed: "
+    #                           "status=%(status)s, detail=%(detail)s"),
+    #                         {'status': res.status, 'detail': data})
+    #             params = {'reason': _("Operation on OFC failed"),
+    #                       'status': res.status}
+    #             if isinstance(data, dict):
+    #                 params['err_code'] = data.get('err_code')
+    #                 params['err_msg'] = data.get('err_msg')
+    #             else:
+    #                 params['err_msg'] = data
+    #             raise nexc.OFCException(**params)
+    #     except (socket.error, IOError) as e:
+    #         reason = _("Failed to connect OFC : %s") % e
+    #         LOG.error(reason)
+    #         raise nexc.OFCException(reason=reason)
     def do_request(self, method, action, body=None):
+        # from neutron.openstack.common import jsonutils
+        from neutron.openstack.common import uuidutils
         LOG.debug(_("Client request: %(host)s:%(port)s "
                     "%(method)s %(action)s [%(body)s]"),
                   {'host': self.host, 'port': self.port,
-                   'method': method, 'action': action, 'body': body})
-        if type(body) is dict:
-            body = json.dumps(body)
-        try:
-            conn = self.get_connection()
-            headers = {"Content-Type": "application/json"}
-            conn.request(method, action, body, headers)
-            res = conn.getresponse()
-            data = res.read()
-            LOG.debug(_("OFC returns [%(status)s:%(data)s]"),
-                      {'status': res.status,
-                       'data': data})
-
-            # Try to decode JSON data if possible.
-            try:
-                data = json.loads(data)
-            except (ValueError, TypeError):
-                pass
-
-            if res.status in (httplib.OK,
-                              httplib.CREATED,
-                              httplib.ACCEPTED,
-                              httplib.NO_CONTENT):
-                return data
-            else:
-                LOG.warning(_("Operation on OFC failed: "
-                              "status=%(status)s, detail=%(detail)s"),
-                            {'status': res.status, 'detail': data})
-                params = {'reason': _("Operation on OFC failed"),
-                          'status': res.status}
-                if isinstance(data, dict):
-                    params['err_code'] = data.get('err_code')
-                    params['err_msg'] = data.get('err_msg')
-                else:
-                    params['err_msg'] = data
-                raise nexc.OFCException(**params)
-        except (socket.error, IOError) as e:
-            reason = _("Failed to connect OFC : %s") % e
-            LOG.error(reason)
-            raise nexc.OFCException(reason=reason)
+                   'method': method, 'action': action,
+                   # 'body': jsonutils.dumps(body, indent=4),
+                   'body': body,
+                   })
+        if method == "POST":
+            return {'id': uuidutils.generate_uuid()}
+        else:
+            return
 
     def get(self, action):
         return self.do_request("GET", action)
